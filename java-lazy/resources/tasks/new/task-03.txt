Дом с электроприборами ^___^

1. Создать следующую структуру пакетов относительно базового
        equipment
                factory
                        data
                                impl
                        impl
                model
                store
        house
                builder
        collection


2. В пакете моделей (model) создать интерфейс "ElectricEquipment"
    public interface ElectricEquipment {
        EquipmentType type();
        int power();
        int price();
        Warranty getWarranty();
    }
Warranty - класс, который находится в пакете 'store', в данном пункте достаточно создать пустой класс, с этим именем

класс абстрактной модели BaseElectricEquipment:
 - который будет содержать данные в виде приватных полей
 - также в нем реализовать все методы интерфейса
 - type и power задавать в конструкторе, соотеветственно они должны быть финальными
 - для всех (для кого возможно) создать геттеры и сеттеры

класс типа - перечисление EquipmentType, у которого есть 3 значения
    PORTABLE - портативные приборы, которые не требуют подлючения к сети
    HEAVY - крупногабаритные
    REGULAR - все остльные

реальизовать несколько классов приборов разного типа (наследуются от базового)


3. Создать класс модели EquipmentParameter, который предсталяет из себя моель параметров для всех приборов. К примеру рассмотрим
тяжелые и портмтивные приборы - телефон и холодильник. У всех електроприборов есть мощность (power). У холодильника будут такие параметры,
как вес/масса (weight), длина (length), ширина (width), высота (height). У телефона диагональ экрана (screenSize). Также нам необходимо знать
тип устройства - телефон, холодильник (type) и кол-во приборов с одинаковыми параметрами (к примеру у нас может быть 10 одинаковых холодильников).
Для типа можно использовать любой тип String, Class, Enum.
Следовательно наша модель должна содержать следущие поля (в конкретном примере):
EquipmentType equipmentType, int power, Class<? extends ElectricEquipment> type, String company, int width, int height, int length, double weight, double screenSize;
Также стоит определить какие из этих параметров будут у всех приборов и являются "главными". Их сделать final с инициализацией в конструкторе.

4. Создать класс для предоставления рандомных данных ввиде List<EquipmentParameter> на основе типа 'EquipmentType'
Создать класс интерфейса 'DataProvider' в пакете 'factory.data'
    public interface DataProvider {
        List<EquipmentParameter> generateParameters(EquipmentType type);
    }
И реализацию данного интерфейса 'RandomDataProvider' в пакете 'factory.data.impl'
Данный метод генерирует набор параметров по типу прибора. К примеру возьмем тяжелый тип. Если мы его передадим в данный метод,
то получим список параметров (по 1 на каждый будущий уникальный прибор, т.е. в списке может к примеру быть 2 набора параметров, для двух разных производителей холодильников),
в котором будут лежать данные для создания разнообразных тяжелых электроприборов (холодильников, телевизоров, стиральных машин и т.д.)

5. Создание фабрику, которая будет производить электрические приборы, для этого нам необходимо реализовать следующее
ElectricEquipmentFactoryService - интерфей, находится в пакете 'factory'. У данного интерфейса есть только 1 метод:
    List<ElectricEquipment> create(List<EquipmentParameter> parameters);
    создает набор электрических приборов (ElectricEquipment) на основе входной конфигурации List<EquipmentParameter> parameters
    данная конфигурация содержит  параметры свойственные определенному типу электроприборов.
Создать 3 реальзации данного интерфейса (по 1 на каждый тип) в пакете 'factory.impl'
RegularEquipmentFactory
PortableEquipmentFactory
HeavyEquipmentFactory

создать класс непосредственно фабрики в пакете 'factory' - ElectricEquipmentFactory
у данного класа должны быть следующие ограничения
    - данный класс нельзя наследовать
    - нельзя создавать экземпляр данного класса (объект через new)
    - должен быть 1 public метод, который является статическим и может создавать приборы, на основе их типа
        public static List<ElectricEquipment> create(EquipmentType type) { ... }
        во внутренней реализации использовать одну из трех реализаций 'ElectricEquipmentFactoryService' в зависимости от передоваемого типа

6. Доработать логику таким образом, чтобы модели ElectricEquipment создавались без внесения в них типа, т.е. с заранее известными типами и в создании участвовали
данные присущие данной сущности (можно через сеттеры). Например если у нас есть телефон и у него есть диагональ экрана (screenSize) помимо типа - портативный и
мощности (которая присуща всем электроприборам), то конструктор класса должен выглядить следующим образом
    public Phone(int power, double screenSize) {
        ...
    }
Также следует сделать невозможным создание всех промежуточных классов между ElectricEquipment и конкретной реалисацией

7. В этом пункте необходимо доработать EquipmentParameter. При создании объекта мы использовали большое кол-во сеттеров или параметров в конструкторе.
    Обновить EquipmentParameter конструктор, если это еще не сделано, таким образом чтобы в создании
    участвовали только важные данные, которые есть у всех сущностей, наподобии типа, мощности и т.д.
    Убрать возможность непосредственного создания данного класса (через оператор new) в главном классе (main) - city.equipment.Program

    Для создания объекта этого класса мы будем использовать новый класс EquipmentParameterBuilder, который позволит создавать класс через цепочку вызовов:
        EquipmentParameterBuilder.builder(...)
            .appendScreenSize(123)
            .appendMatrixType(MatrixType.VA)
            ...
            .build();
    Для этого нам понсдобится следущее:
        - Создать приватный конструктор с теми же параметрами, что и EquipmentParameter.
        - Создать статический метод, который будет возвращать EquipmentParameterBuilder
        - Создать новый метод в классе EquipmentParameterBuilder на каждый сеттер в классе EquipmentParameter.
            Эти методы должны называться почти так же, только вместо set будет использоваться append.
            Эти методы должны сохранять промежуточное состояние объекта для создания или самого объекта
            Возвращаемый тип этих методов должен быть не void, а EquipmentParameterBuilder.
        - Сеттеры класса EquipmentParameter должны быть недоступны для вызова, кроме как в этом билдере.
    Этот стособ создания объекта будет гарантировать в будущем неизменность данных и более удобное создание объекта.

8 Создать интерфейс который будет содержать доп. методы для листа
    public interface ApartmentList {
        int getAvailableSize();
        int allFilledSize();
        boolean addApartment(int index, Apartment apartment);
    }
Создать свою реализацию коллекции - лист. Имплиментировать лист параметризированный Apartment (до этого создать пустой класс Apartment(int money, int maxPower) в city.house):
    public class PartFilledApartmentList implements List<Apartment>, ApartmentList {
        ...
    }

Этот лист неизменяемый по размеру и по сути представляет подобие жилого дома. У нас есть максимальный размер и процент заселения квартир.
Распределение свободных для заселения квартир должно быть случайным. Остальная часть недоступна для заселения.
Для примера возьмем коллекцию размером 5 и заполнением 40%. Рандомом можно заселить 0 и 3, т.е. 1, 2 и 4 недоступны (можно представить что эти номера - это номера квартир,
внутрення реализация любая на усмотрение)
Если мы попробуем по ней пройтись или взять размер изначально он будет нулевым (также будут дополнительные методы для взятия размера).
    - Добавляем первый элемент. Он должен добавиться таким образом чтобы был заполненен 0й элемент. Размер будет 1 элемент.
    при попытке пройтись по этой коллекции получим этот 1 элемент, остальные - null
    - Добавим еще 1 элемент. Размер станет 2. элементы будут: el1, null, null, el2, null.
    - Добавляем еще элемент. Размер не изменяется, данные не попадают в коллекцию: el1, null, null, el2, null.

При реализации можно использовать тесты чтобы проверить все ли работает верно. Для этого необходимо скопировать (возьмем самый простой вариант)
PartFilledApartmentListTest в test/java/... к себе в пакет и поменять импорт класса с
import solution.kiryl.city.collection.PartFilledApartmentList; на свою. Запускать можно отдельные тесты

Это была общая идея. Теперь немного подробныей про эту коллекцию и что предстоит сделать:

    - Коллекция должна содержать только апартаменты, конструктор должен принимать максимальный размер и процент заполнения.
    При расчете кол-ва свободных мест округление происходит в меньшую сторону. 10 и 40% -> 4, 10 и 69% -> 6

    Порядок реализации методов:
        1. public boolean add(Apartment apartment)
            При добавлении новых элементов они кладутся на свободные места. При успехе возращается true.
            Если не удалось положить элемент по причине того, что закончились места - false
            Tests: shouldAddElement, shouldNotAddElement

        2. public int size()
            Должен возвращать кол-во добавленных элементов, т.е. реально заселенных апартаментов.
            Tests: shouldReturnCorrectSize

        3. public boolean contains(Object o)
            Должен проверять если такой элемент в коллекции. Если мы ищем null, то его найдет в коллекции с заполнением < 100%
            (учитывая округление) и не пустой коллекции.
            Tests: shouldFindElement, shouldNotFindElement, shouldFindNullElementInPartFilledCollection, shouldNotFindNullInEmptyCollection, shouldNotFindNullInFullCollection

        4. public boolean containsAll(Collection<?> c)
            Должен проверять если все элементы входной коллекции в нашем листе
            Tests: shouldFindAllElements, shouldNotFindNullCollectionInEmptyCollection, shouldFindNullInNotEmptyCollection

        5. public Apartment get(int index)
            Получить элемент по индексу
            Tests: shouldGetElementByIndex

        6. public boolean isEmpty()
            Должна возвращать false, если был добавлен хотябы 1 элемент
            Tests: shouldReturnRightEmptyStatus

        7. public PartFilledApartmentListNew(int maxSize, double fillPercentage) - конструктор
            Проверяем что наша коллекция создается с верным распределением в зависимости от переданного процента (округление венрно)
            Tests: shouldCreatePartFilledCollection, shouldCreatePartFilledCollectionWithRoundingDown

        8. public void add(int index, Apartment element)
            Добавление элемента по индексу. Добавление происходит успешно только в том случае, если это место является вакантным (свободным),
            Tests: shouldAddElementAtIndex

        9. public boolean addAll(Collection<? extends Apartment> collection)
            Должен добавлять все элементы одной коллекции в другую, по принципам описанным выше.
            Tests: shouldAddAllElements

        10. public boolean retainAll(Collection<?> c)
            Неподдерживаемая операция
            Tests: shouldThrowExceptionWhenRetainAll

        11. public boolean addAll(int index, Collection<? extends Apartment> c)
            Добавление коллекции не в конец не поддерживается, т.к. при этом необходимо сделать смещение.
            В реальной жизни если бы кто-то заселился в квартиру которая была ранее не занята, всем бы жильцам пришлось переехать на 1 квартиру.
            Tests: shouldNotAddApartmentsWithShift

        12. public Apartment set(int index, Apartment element)
            Неподдерживаемая операция
            Tests: shouldThrowExceptionWhenSetElement

        13. public int indexOf(Object o)
            получение индекса первого совпадения с начала, иначе возвращается -1
            Tests: shouldGetIndexOf

        14. public int lastIndexOf(Object o)
            получение индекса первого совпадения с конца, иначе возвращается -1
            Tests: shouldGetLastElementByIndex

        15. public List<Apartment> subList(int fromIndex, int toIndex)
            Должен вернуться лист апартментов как часть исходного. включая стартовый и не включая последний
            Tests: shouldReturnSublist

        16. public String toString()
            Дожно быть идентично выводу стандартных коллекций (к примеру ArrayList)
            Tests: shouldGetStringViewAsArrayList

        17. public boolean remove(Object o)
            Должен удалять переданный элемент из коллекции. Если элемент удален - true. null нельзя удалить
            Tests: shouldRemoveElement, shouldNotRemoveNullElement

        18. public Apartment remove(int index)
            Должен удалить элемент по индексу, если там есть данные
            Tests: shouldRemoveElementByIndex, shouldRemoveNotRemoveNullElementByIndex

        19. public Object[] toArray()
            Должен возвращать представление листа в виде массива объектов
            Tests: shouldConvertToObjectsArray

        20. public <T> T[] toArray(T[] a)
            Должен возвращать представление листа в виде массива типизированно T. В нашем случае поддерживается только массив Apartment[]
            Если массив будет не типа Apartment, то должно появится IllegalArgumentException
            Tests: shouldConvertToApartmentArray, shouldThrowExceptionIfUnsupportedType

        21. public boolean addApartment(int index, Apartment apartment)
            Этот новый метод должен позволять добавлять элемены на указанную позицию. Если место уже занято, то ничего не должно произойти,
            вернется false. Элемент может быть добавлен на любое свободно место, даже если оно не вакантное. При этом оно становится вакантным.
            В примере выше если мы добавим на 2ю позицию, то получим следущее: el1, null, el3, el2, null
            Tests: shouldAddApartmentInEmptyPoint, shouldNotAddApartmentInFilledPoint

        22. public int getAvailableSize()
            Должен возвращать доступный размер для заселения (в идеале это максимально возможный размер)
            Tests: shouldReturnCorrectRealSize

        23. public int allFilledSize()
            Должен возвращать размер заполненных апартоментов. До последнего заселенного.
            el1, null, el2, null, null - должен вернуть 3
            Tests: shouldReturnRealFilledSize

        24. public Iterator<Apartment> iterator()
            возвращает реальзацию итератора, которая способна пройти по нашей коллекции
            Tests: shouldReturnIterator

        25. public boolean hasNext()
            проверяет есть ли еще элементы в коллекции
            Tests: shouldFindNext, shouldNotFindNext

        26. public Apartment next()
            возвращает следующий элемент коллекции иначе ArrayIndexOutOfBoundsException
            Tests: shouldGetNextIfPresent, shouldNotGetNextElementIfAbsent

        27. public ListIterator<Apartment> listIterator()
            возвращает реальзацию итератора, которая способна пройти по нашей коллекции
            Tests: shouldReturnListIterator

        28. public ListIterator<Apartment> listIterator(int index)
            возвращает реальзацию итератора, которая способна пройти по нашей коллекции начиная с элемента index
            Tests: shouldReturnListIteratorStartedWithIndex

        29. public boolean hasPrevious()
            Проверяет, есть ли предыдущий элемент.
            Tests: shouldFindPrevious, shouldNotFindPrevious

        30. public Apartment previous()
            Возвращает предыдущий вариант
            Tests: shouldGetPrevious

        31. public int nextIndex()
            Возвращает следующий индекс элемента или -1, если конец списка
            Tests: shouldReturnNextIndex, shouldNotReturnNextIndex

        32. public int previousIndex()
            Возвращает предыдущий индекс элемента или -1, если индекс < 0
            Tests: shouldReturnPreviousIndex, shouldNotReturnPreviousIndex

        33. public void remove()
            должен удалить элемент на текущей позиции
            Tests: shouldRemoveElementFromCollectionViaIterator

        34. public boolean removeAll(Collection<?> c)
            Должен удалять все элементы, которые мы передаем в качестве параметров из листа. Если все удалены - true
            Входная коллекция в которой есть null - null просто игнорируется. Если во входной коллекции только null - вернуть false
            Tests: shouldRemoveAllFromCollection, shouldRemoveAllIfNullExistsInInputFromCollection, shouldNotRemoveIfOnlyNulls

        35. public void clear()
            Должен удалять все элементы коллекции и делать недоступными для заселения.
            Tests: shouldClearAllData

        36. public void add(Apartment apartment) - лист итератор
            Неподдерживаемая операция
            Tests: shouldThrowExceptionOnListIteratorAdd

        37. public void set(Apartment apartment) - лист итератор
            Неподдерживаемая операция
            Tests: shouldThrowExceptionOnListIteratorSet