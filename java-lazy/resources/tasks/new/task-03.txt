Дом с электроприборами ^___^

1. Создать следующую структуру пакетов относительно базового
        equipment
                factory
                        data
                                impl
                        impl
                model
                store
        house
                builder
        collection


2. В пакете моделей (model) создать интерфейс "ElectricEquipment"
    public interface ElectricEquipment {
        EquipmentType type();
        int power();
        int price();
        Warranty getWarranty();
    }
Warranty - класс, который находится в пакете 'store', в данном пункте достаточно создать пустой класс, с этим именем

класс абстрактной модели BaseElectricEquipment:
 - который будет содержать данные в виде приватных полей
 - также в нем реализовать все методы интерфейса
 - type и power задавать в конструкторе, соотеветственно они должны быть финальными
 - для всех (для кого возможно) создать геттеры и сеттеры

класс типа - перечисление EquipmentType, у которого есть 3 значения
    PORTABLE - портативные приборы, которые не требуют подлючения к сети
    HEAVY - крупногабаритные
    REGULAR - все остльные

реальизовать несколько классов приборов разного типа (наследуются от базового)


3. Создать класс модели EquipmentParameter, который предсталяет из себя моель параметров для всех приборов. К примеру рассмотрим
тяжелые и портмтивные приборы - телефон и холодильник. У всех електроприборов есть мощность (power). У холодильника будут такие параметры,
как вес/масса (weight), длина (length), ширина (width), высота (height). У телефона диагональ экрана (screenSize). Также нам необходимо знать
тип устройства - телефон, холодильник (type) и кол-во приборов с одинаковыми параметрами (к примеру у нас может быть 10 одинаковых холодильников).
Для типа можно использовать любой тип String, Class, Enum.
Следовательно наша модель должна содержать следущие поля (в конкретном примере):
EquipmentType equipmentType, int power, Class<? extends ElectricEquipment> type, String company, int width, int height, int length, double weight, double screenSize;
Также стоит определить какие из этих параметров будут у всех приборов и являются "главными". Их сделать final с инициализацией в конструкторе.

4. Создать класс для предоставления рандомных данных ввиде List<EquipmentParameter> на основе типа 'EquipmentType'
Создать класс интерфейса 'DataProvider' в пакете 'factory.data'
    public interface DataProvider {
        List<EquipmentParameter> generateParameters(EquipmentType type);
    }
И реализацию данного интерфейса 'RandomDataProvider' в пакете 'factory.data.impl'
Данный метод генерирует набор параметров по типу прибора. К примеру возьмем тяжелый тип. Если мы его передадим в данный метод,
то получим список параметров (по 1 на каждый будущий уникальный прибор, т.е. в списке может к примеру быть 2 набора параметров, для двух разных производителей холодильников),
в котором будут лежать данные для создания разнообразных тяжелых электроприборов (холодильников, телевизоров, стиральных машин и т.д.)

5. Создание фабрику, которая будет производить электрические приборы, для этого нам необходимо реализовать следующее
ElectricEquipmentFactoryService - интерфей, находится в пакете 'factory'. У данного интерфейса есть только 1 метод:
    Set<ElectricEquipment> create(List<EquipmentParameter> parameters);
    создает набор электрических приборов (ElectricEquipment) на основе входной конфигурации List<EquipmentParameter> parameters
    данная конфигурация содержит  параметры свойственные определенному типу электроприборов.
Создать 3 реальзации данного интерфейса (по 1 на каждый тип) в пакете 'factory.impl'
RegularEquipmentFactory
PortableEquipmentFactory
HeavyEquipmentFactory

создать класс непосредственно фабрики в пакете 'factory' - ElectricEquipmentFactory
у данного класа должны быть следующие ограничения
    - данный класс нельзя наследовать
    - нельзя создавать экземпляр данного класса (объект через new)
    - должен быть 1 public метод, который является статическим и может создавать приборы, на основе их типа
        public static List<ElectricEquipment> create(EquipmentType type) { ... }
        во внутренней реализации использовать одну из трех реализаций 'ElectricEquipmentFactoryService' в зависимости от передоваемого типа

6. Доработать логику таким образом, чтобы модели ElectricEquipment создавались без внесения в них типа, т.е. с заранее известными типами и в создании участвовали
данные присущие данной сущности (можно через сеттеры). Например если у нас есть телефон и у него есть диагональ экрана (screenSize) помимо типа - портативный и
мощности (которая присуща всем электроприборам), то конструктор класса должен выглядить следующим образом
    public Phone(int power, double screenSize) {
        ...
    }
Также следует сделать невозможным создание всех промежуточных классов между ElectricEquipment и конкретной реалисацией

7. В этом пункте необходимо доработать EquipmentParameter. При создании объекта мы использовали большое кол-во сеттеров или параметров в конструкторе.
    Обновить EquipmentParameter конструктор, если это еще не сделано, таким образом чтобы в создании
    участвовали только важные данные, которые есть у всех сущностей, наподобии типа, мощности и т.д.
    Убрать возможность непосредственного создания данного класса (через оператор new) в главном классе (main)

    Для создания объекта этого класса мы будем использовать новый класс EquipmentParameterBuilder, который позволит создавать класс через цепочку вызовов:
        EquipmentParameterBuilder.builder(...)
            .appendScreenSize(123)
            .appendMatrixType(MatrixType.VA)
            ...
            .build();
    Для этого нам понсдобится следущее:
        - Создать приватный конструктор с теми же параметрами, что и EquipmentParameter.
        - Создать статический метод, который будет возвращать EquipmentParameterBuilder
        - Создать новый метод в классе EquipmentParameterBuilder на каждый сеттер в классе EquipmentParameter.
            Эти методы должны называться почти так же, только вместо set будет использоваться append.
            Эти методы должны сохранять промежуточное состояние объекта для создания или самого объекта
            Возвращаемый тип этих методов должен быть не void, а EquipmentParameterBuilder.
        - Сеттеры класса EquipmentParameter должны быть недоступны для вызова, кроме как в этом билдере.
    Этот стособ создания объекта будет гарантировать в будущем неизменность данных и более удобное создание объекта.
